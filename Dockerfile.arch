FROM archlinux:latest

# User config (overridden via --build-arg MY_SSH_USER=...)
ARG MY_SSH_USER
ENV MY_SSH_USER=${MY_SSH_USER:-podmanuser}

RUN [ -z "$MY_SSH_USER" ] && (echo "ERROR: MY_SSH_USER is not set!" && exit 1) || echo "Using MY_SSH_USER=$MY_SSH_USER"

######### beginning of the free internet access ##############
ARG http_proxy=   ARG https_proxy=   ARG no_proxy=
ARG HTTP_PROXY=   ARG HTTPS_PROXY=   ARG NO_PROXY=
ENV http_proxy= \
    https_proxy= \
    HTTP_PROXY= \
    HTTPS_PROXY= \
    no_proxy= \
    NO_PROXY=
##############################################################

# # Copy the proxy env into the container
COPY ./docker-proxy.env /usr/local/bin/proxy.env

# ---- pacman: relax/disable download timeout for slow proxy ----
# Pacman doesnâ€™t take a numeric timeout like dnf/apt; use DisableDownloadTimeout.
# Also turn on a few parallel downloads to keep things moving through a proxy.
RUN sed -i 's/^#ParallelDownloads.*/ParallelDownloads = 5/' /etc/pacman.conf || true && \
    (grep -q '^DisableDownloadTimeout' /etc/pacman.conf \
      && sed -i 's/^#\?DisableDownloadTimeout/DisableDownloadTimeout/' /etc/pacman.conf \
      || sed -i '/^\[options\]/a DisableDownloadTimeout' /etc/pacman.conf)


# for linux distribution package manager i use a wrapper called package-mgr-v2 (from my utility repo) which wraps
# proxy and cert usage for pacman
# for other utils (like curl) using proxy i use various function wrappers from proxy_wrappers.sh collection (also from my utilitiy repo)

COPY bash-provisioner/provisions/proxy_wrappers.sh /usr/local/bin/proxy_wrappers.sh
RUN chmod 644 /usr/local/bin/proxy_wrappers.sh
COPY bash-provisioner/provisions/package-mgr-v2 /usr/local/bin/package-mgr-v2
RUN chmod +x /usr/local/bin/package-mgr-v2

# we need to fix outdated mirrorlist and gpg keys otherwise we will
# get infamous GPGME error messages
# see : https://vadosware.io/post/fixing-gpgme-error-on-arch/

# copy latest mirrorlist, generated by: https://archlinux.org/mirrorlist
COPY arch_mirrorlist /etc/pacman.d/mirrorlist
# Ensure the mirrorlist has the correct permissions
RUN chmod 644 /etc/pacman.d/mirrorlist


# due to arch is a rolling update some repo sources and gpg keys are outdated
# here is how to fix, install the latest gpg keyring package which we 
# downloaded from outside of docker locally.
# Copy the local keyring package and the installer script
COPY archlinux-keyring.pkg.tar.zst /opt/archlinux-keyring.pkg.tar.zst
COPY seed-arch-keyring-local-file.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/seed-arch-keyring-local-file.sh

RUN rm -rf /etc/pacman.d/gnupg/* /var/lib/pacman/sync && \
    pacman-key --init

# Do a local (offline) install of the latest keyring only
RUN /usr/local/bin/seed-arch-keyring-local-file.sh --pkg /opt/archlinux-keyring.pkg.tar.zst

# make full system update
RUN /usr/local/bin/package-mgr-v2 --load-env-file=/usr/local/bin/proxy.env -Syyu --noconfirm

# Base packages install
#RUN pacman -S --noconfirm \
RUN /usr/local/bin/package-mgr-v2 \
  --load-env-file=/usr/local/bin/proxy.env \
  --noconfirm -Sy \
    systemd \
    openssh \
    firewalld \
    cronie \
    python \
    bash \
    vim \
    sudo \
    rsync \
    curl \
    ca-certificates \
    ca-certificates-utils


# Enable services
RUN systemctl enable sshd && \
    systemctl enable firewalld && \
    systemctl enable cronie

# SSH hardening
RUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config && \
    sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config && \
    sed -i 's/#AuthorizedKeysFile .ssh\/authorized_keys/AuthorizedKeysFile .ssh\/authorized_keys/' /etc/ssh/sshd_config

# User + sudoers
RUN useradd -m -s /bin/bash ${MY_SSH_USER} && \
    mkdir -p /home/${MY_SSH_USER}/.ssh && \
    chown ${MY_SSH_USER}:${MY_SSH_USER} /home/${MY_SSH_USER}/.ssh && \
    chmod 700 /home/${MY_SSH_USER}/.ssh && \
    echo "${MY_SSH_USER} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${MY_SSH_USER} && \
    chmod 440 /etc/sudoers.d/${MY_SSH_USER}


# test scripts go here
RUN mkdir /tests
COPY test_mitmproxy_script.sh /tests
RUN chmod +x /tests/*

# Bootstrap scripts
COPY configure.sh /usr/local/bin/configure.sh
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/configure.sh /usr/local/bin/entrypoint.sh

EXPOSE 22
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/usr/lib/systemd/systemd"]
