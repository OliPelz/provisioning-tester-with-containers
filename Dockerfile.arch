FROM archlinux:latest

# User config (overridden via --build-arg SSH_USER=...)
ARG SSH_USER
ENV SSH_USER=${SSH_USER:-podmanuser}

ARG http_proxy
ENV http_proxy="http://webproxycache:3128"

ARG no_proxy
ENV no_proxy=${no_proxy}

ARG CERT_BASE64_STRING
ENV CERT_BASE64_STRING=${CERT_BASE64_STRING}

RUN [ -z "$SSH_USER" ] && (echo "ERROR: SSH_USER is not set!" && exit 1) || echo "Using SSH_USER=$SSH_USER"


# Copy the script into the image
COPY setup-proxy.sh /usr/local/bin/setup-proxy.sh

# Make the script executable
RUN chmod +x /usr/local/bin/setup-proxy.sh

# Run the script
RUN /usr/local/bin/setup-proxy.sh


# ---- pacman: relax/disable download timeout for slow proxy ----
# Pacman doesnâ€™t take a numeric timeout like dnf/apt; use DisableDownloadTimeout.
# Also turn on a few parallel downloads to keep things moving through a proxy.
RUN sed -i 's/^#ParallelDownloads.*/ParallelDownloads = 5/' /etc/pacman.conf || true && \
    (grep -q '^DisableDownloadTimeout' /etc/pacman.conf \
      && sed -i 's/^#\?DisableDownloadTimeout/DisableDownloadTimeout/' /etc/pacman.conf \
      || sed -i '/^\[options\]/a DisableDownloadTimeout' /etc/pacman.conf)

# we need to fix outdated mirrorlist and gpg keys otherwise we will
# get infamous GPGME error messages
# see : https://vadosware.io/post/fixing-gpgme-error-on-arch/

# copy latest mirrorlist, generated by: https://archlinux.org/mirrorlist
COPY arch_mirrorlist /etc/pacman.d/mirrorlist
# Ensure the mirrorlist has the correct permissions
RUN chmod 644 /etc/pacman.d/mirrorlist



# test scripts go here
RUN mkdir /tests
COPY test_mitmproxy_script.sh /tests
RUN chmod +x /tests/*

# update latest keys and make full system update
# due to arch is a rolling update some repo sources and gpg keys are outdated
# here is how to fix:
RUN rm -rf /etc/pacman.d/gnupg /var/lib/pacman/sync && \
    pacman-key --init && \
    pacman-key --populate && \
    pacman-key --refresh-keys || true && \
    pacman -Sy archlinux-keyring --noconfirm && \
    pacman -Syyu --noconfirm

# Base packages install
RUN pacman -S --noconfirm \
      systemd \
      openssh \
      firewalld \
      cronie \
      python \
      bash \
      vim \
      sudo \
      rsync \
      curl \
      ca-certificates ca-certificates-utils && \
    pacman -Scc --noconfirm

# Enable services
RUN systemctl enable sshd && \
    systemctl enable firewalld && \
    systemctl enable cronie

# SSH hardening
RUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config && \
    sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config && \
    sed -i 's/#AuthorizedKeysFile .ssh\/authorized_keys/AuthorizedKeysFile .ssh\/authorized_keys/' /etc/ssh/sshd_config

# User + sudoers
RUN useradd -m -s /bin/bash ${SSH_USER} && \
    mkdir -p /home/${SSH_USER}/.ssh && \
    chown ${SSH_USER}:${SSH_USER} /home/${SSH_USER}/.ssh && \
    chmod 700 /home/${SSH_USER}/.ssh && \
    echo "${SSH_USER} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${SSH_USER} && \
    chmod 440 /etc/sudoers.d/${SSH_USER}


# Bootstrap scripts
COPY configure.sh /usr/local/bin/configure.sh
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/configure.sh /usr/local/bin/entrypoint.sh

EXPOSE 22
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/usr/lib/systemd/systemd"]
