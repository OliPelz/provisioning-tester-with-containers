FROM archlinux:latest

# --- minimal user config (no network needed) ---
ARG MY_SSH_USER
ENV MY_SSH_USER=${MY_SSH_USER:-podmanuser}
RUN [ -z "$MY_SSH_USER" ] && (echo "ERROR: MY_SSH_USER is not set!" && exit 1) || echo "Using MY_SSH_USER=$MY_SSH_USER"

######### beginning of the free internet access ##############
# Explicitly clear any build-time proxies
ARG http_proxy=   ARG https_proxy=   ARG no_proxy=
ARG HTTP_PROXY=   ARG HTTPS_PROXY=   ARG NO_PROXY=
ENV http_proxy= \
    https_proxy= \
    HTTP_PROXY= \
    HTTPS_PROXY= \
    no_proxy= \
    NO_PROXY=
##############################################################

# Optional proxy env (will be used at runtime by our wrappers)
# Overwrite this at build or mount a different file at runtime
COPY ./docker-proxy.env /usr/local/bin/proxy.env

# Mirrorlist (offline copy generated by you)
COPY arch_mirrorlist /etc/pacman.d/mirrorlist
RUN chmod 644 /etc/pacman.d/mirrorlist

# Relax pacman download timeout & parallel downloads (no network)
RUN sed -i 's/^#ParallelDownloads.*/ParallelDownloads = 5/' /etc/pacman.conf || true && \
    (grep -q '^DisableDownloadTimeout' /etc/pacman.conf \
      && sed -i 's/^#\?DisableDownloadTimeout/DisableDownloadTimeout/' /etc/pacman.conf \
      || sed -i '/^\[options\]/a DisableDownloadTimeout' /etc/pacman.conf)

# Offline keyring seed assets (no network)
COPY archlinux-keyring.pkg.tar.zst /opt/archlinux-keyring.pkg.tar.zst

# Your proxy helpers & pm wrapper (no network)
COPY bash-provisioner/provisions/proxy_wrappers.sh /usr/local/bin/proxy_wrappers.sh
RUN chmod 644 /usr/local/bin/proxy_wrappers.sh
COPY bash-provisioner/provisions/package-mgr-v2 /usr/local/bin/package-mgr-v2
RUN chmod +x /usr/local/bin/package-mgr-v2

# Seed script (used at runtime)
COPY seed-arch-keyring-local-file.sh /usr/local/bin/seed-arch-keyring-local-file.sh
RUN chmod +x /usr/local/bin/seed-arch-keyring-local-file.sh

# First-boot provision bits (all runtime, after network is up)
COPY firstboot-provision.sh /usr/local/bin/firstboot-provision.sh
RUN chmod +x /usr/local/bin/firstboot-provision.sh
COPY firstboot-provision.service /etc/systemd/system/firstboot-provision.service

# Configure user + sudoers (no network)
RUN useradd -m -s /bin/bash ${MY_SSH_USER} && \
    mkdir -p /home/${MY_SSH_USER}/.ssh && \
    chown ${MY_SSH_USER}:${MY_SSH_USER} /home/${MY_SSH_USER}/.ssh && \
    chmod 700 /home/${MY_SSH_USER}/.ssh && \
    echo "${MY_SSH_USER} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${MY_SSH_USER} && \
    chmod 440 /etc/sudoers.d/${MY_SSH_USER}

# Your small config helper (offline)
COPY configure.sh /usr/local/bin/configure.sh
RUN chmod +x /usr/local/bin/configure.sh

# Minimal entrypoint that wires the first-boot provisioning (runtime)
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# First-boot marker so the service runs once at first start
RUN mkdir -p /var/lib/firstboot && touch /var/lib/firstboot/needed && \
    systemctl enable firstboot-provision.service

# Optional: tests (no network)
RUN mkdir /tests
COPY test_mitmproxy_script.sh /tests
RUN chmod +x /tests/*

EXPOSE 22
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/usr/lib/systemd/systemd"]

